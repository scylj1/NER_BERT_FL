# -*- coding: utf-8 -*-
"""task3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Kx0_B6Ngn8-_h0le4OtC0ct_J85AzZ4q
"""
import torch
import pandas as pd
import numpy as np
wnuttrain = 'https://storage.googleapis.com/wnut-2017_ner-shared-task/wnut17train_clean_tagged.txt'
train = pd.read_table(wnuttrain, header=None, names=['token', 'label', 'bio_only', 'upos'])
# NB: don't drop the empty lines between texts yet, they are needed for sequence splits (they show up as NaN in the data frame)
train.head(n=30)

# the dev set
wnutdev = 'https://storage.googleapis.com/wnut-2017_ner-shared-task/wnut17dev_clean_tagged.txt'
dev = pd.read_table(wnutdev, header=None, names=['token', 'label', 'bio_only', 'upos'])

# the test set
wnuttest = 'https://storage.googleapis.com/wnut-2017_ner-shared-task/wnut17test_annotated_clean_tagged.txt'
test = pd.read_table(wnuttest, header=None, names=['token','label', 'bio_only', 'upos'])


def tokens2sequences(txt_in,istest=False):
  '''
  Takes panda dataframe as input, copies, and adds a sequence index based on full-stops.
  Outputs a dataframe with sequences of tokens, named entity labels, and token indices as lists.
  '''
  txt = txt_in.copy()
  txt['sequence_num'] = 0
  seqcount = 0
  for i in txt.index:  # in each row...
    txt.loc[i,'sequence_num'] = seqcount  # set the sequence number
    if pd.isnull(txt.loc[i,'token']):  # increment sequence counter at empty lines
      seqcount += 1
  # now drop the empty lines, group by sequence number and output df of sequence lists
  txt = txt.dropna()
  if istest:  # looking ahead: the test set doesn't have labels
    txt_seqs = txt.groupby(['sequence_num'],as_index=False)[['token']].agg(lambda x: list(x))
  else:  # the dev and training sets do have labels
    txt_seqs = txt.groupby(['sequence_num'],as_index=False)[['token', 'bio_only']].agg(lambda x: list(x))
  return txt_seqs

print("This cell takes a little while to run: be patient :)")
train_seqs = tokens2sequences(train)
train_seqs.head()

dev_seqs = tokens2sequences(dev)

test_seqs = tokens2sequences(test)
#print(test_seqs)

def read_wnut(file):
    
    token_docs = []
    tag_docs = []

    for num in range (len(file['sequence_num'])):
        
        token_docs.append(file['token'][num])
        tag_docs.append(file['bio_only'][num])

    return token_docs, tag_docs

train_texts, train_tags = read_wnut(train_seqs)
print(train_texts[0][10:17], train_tags[0][10:17], sep='\n')
val_texts, val_tags = read_wnut(dev_seqs)
test_texts, test_tags = read_wnut(test_seqs)
print(test_texts[0][10:17], test_tags[0][10:17], sep='\n')
unique_tags = set(tag for doc in train_tags for tag in doc)
tag2id = {tag: id for id, tag in enumerate(unique_tags)}
id2tag = {id: tag for tag, id in tag2id.items()}

from transformers import DistilBertTokenizerFast
tokenizer = DistilBertTokenizerFast.from_pretrained('distilbert-base-cased')
train_encodings = tokenizer(train_texts, is_split_into_words=True, return_offsets_mapping=True, padding=True, truncation=True)
val_encodings = tokenizer(val_texts, is_split_into_words=True, return_offsets_mapping=True, padding=True, truncation=True)
test_encodings = tokenizer(test_texts, is_split_into_words=True, return_offsets_mapping=True, padding=True, truncation=True)

import numpy as np

def encode_tags(tags, encodings):
    labels = [[tag2id[tag] for tag in doc] for doc in tags]
    encoded_labels = []
    for doc_labels, doc_offset in zip(labels, encodings.offset_mapping):
        # create an empty array of -100
        doc_enc_labels = np.ones(len(doc_offset),dtype=int) * -100
        arr_offset = np.array(doc_offset)

        # set labels whose first offset position is 0 and the second is not 0
        doc_enc_labels[(arr_offset[:,0] == 0) & (arr_offset[:,1] != 0)] = doc_labels
        encoded_labels.append(doc_enc_labels.tolist())

    return encoded_labels

train_labels = encode_tags(train_tags, train_encodings)
val_labels = encode_tags(val_tags, val_encodings)
test_labels = encode_tags(test_tags, test_encodings)

import torch

class WNUTDataset(torch.utils.data.Dataset):
    def __init__(self, encodings, labels):
        self.encodings = encodings
        self.labels = labels

    def __getitem__(self, idx):
        item = {key: torch.tensor(val[idx]) for key, val in self.encodings.items()}
        item['labels'] = torch.tensor(self.labels[idx])
        return item

    def __len__(self):
        return len(self.labels)

train_encodings.pop("offset_mapping") # we don't want to pass this to the model
val_encodings.pop("offset_mapping")
test_encodings.pop("offset_mapping")

train_dataset = WNUTDataset(train_encodings, train_labels)
val_dataset = WNUTDataset(val_encodings, val_labels)
test_dataset = WNUTDataset(test_encodings, test_labels)

# length ÈïøÂ∫¶
train_data_size = len(train_dataset)
val_data_size = len(val_dataset)

from transformers import DistilBertForTokenClassification
model = DistilBertForTokenClassification.from_pretrained('distilbert-base-cased', num_labels=len(unique_tags))


import numpy as np
def align_predictions(predictions, label_ids):
    preds = np.argmax(predictions, axis=2)
    batch_size, seq_len = preds.shape
    labels_list, preds_list = [], []
    for batch_idx in range(batch_size):
        example_labels, example_preds = [], []
        for seq_idx in range(seq_len):
            # Ignore label IDs = -100
            if label_ids[batch_idx, seq_idx] != -100:
                example_labels.append(id2tag[label_ids[batch_idx][seq_idx]])
                example_preds.append(id2tag[preds[batch_idx][seq_idx]])
        labels_list.append(example_labels)
        preds_list.append(example_preds)
    return preds_list, labels_list

from seqeval.metrics import f1_score, accuracy_score, precision_score, recall_score
def compute_metrics(eval_pred):
    y_pred, y_true = align_predictions(eval_pred.predictions,eval_pred.label_ids)
    #print(y_pred[0:10])
    #print(y_true[0:10])
    return {"accuracy": accuracy_score(y_true, y_pred), "precision": precision_score(y_true, y_pred), "recall": recall_score(y_true, y_pred), "f1": f1_score(y_true, y_pred)}

from transformers import DistilBertForSequenceClassification, Trainer, TrainingArguments

training_args = TrainingArguments(
    output_dir='./results',          # output directory
    num_train_epochs=5,              # total number of training epochs
    learning_rate=2e-5,
    per_device_train_batch_size=64,  # batch size per device during training
    per_device_eval_batch_size=64,   # batch size for evaluation
    #warmup_steps=500,                # number of warmup steps for learning rate scheduler
    weight_decay=0.01,               # strength of weight decay
    evaluation_strategy="epoch",
    disable_tqdm=False,
    logging_dir='./logs',            # directory for storing logs
    logging_steps=10,
    seed=4921,
    
)

#model = DistilBertForSequenceClassification.from_pretrained("distilbert-base-uncased")

trainer = Trainer(
    model=model,                         # the instantiated ü§ó Transformers model to be trained
    args=training_args,                  # training arguments, defined above
    compute_metrics=compute_metrics,
    train_dataset=train_dataset,         # training dataset
    eval_dataset=val_dataset,             # evaluation dataset
    tokenizer=tokenizer
)

trainer.train()

trainer.evaluate()

#model.save_pretrained("./model/%s-%sepoch" % ('distilbert', 20))

res = trainer.predict(test_dataset).metrics["test_f1"]
print(res)

'''
from transformers import AutoModelForTokenClassification, TrainingArguments, Trainer

model = AutoModelForTokenClassification.from_pretrained('./model/distilbert-5epoch')

if __name__ == '__main__':
    
    
    input_tensor = tokenizer(test_texts[1], is_split_into_words=True, padding=True, truncation=True,
                             return_offsets_mapping=True, max_length=512, return_tensors="pt")
    input_tokens = input_tensor.tokens()
    offsets = input_tensor["offset_mapping"]
    ignore_mask = offsets[0, :, 1] == 0
    # print(input_tensor)
    input_tensor.pop("offset_mapping")  # ‰∏çÂâîÈô§ÁöÑËØù‰ºöÊä•Èîô
    outputs = model(**input_tensor)
    probabilities = torch.nn.functional.softmax(outputs.logits, dim=-1)[0].tolist()
    predictions = outputs.logits.argmax(dim=-1)[0].tolist()
    print(predictions)
    results = []

    tokens = input_tensor.tokens()
    idx = 0
    while idx < len(predictions):
        if ignore_mask[idx]:
            idx += 1
            continue
        pred = predictions[idx]
        label = model.config.id2label[pred]
        print(label)
        if label != "O":
            # ‰∏çÂä†B-ÊàñËÄÖI-
            label = label[2:]
            start = idx
            end = start + 1
            # Ëé∑ÂèñÊâÄÊúâtoken I-label
            all_scores = []
            all_scores.append(probabilities[start][predictions[start]])
            while (
                    end < len(predictions)
                    and model.config.id2label[predictions[end]] == f"I-{label}"
            ):
                all_scores.append(probabilities[end][predictions[end]])
                end += 1
                idx += 1
            # ÂæóÂà∞ÊòØ‰ªñ‰ª¨Âπ≥ÂùáÁöÑ
            score = np.mean(all_scores).item()
            word = input_tokens[start:end]
            results.append(
                {
                    "entity_group": label,
                    "score": score,
                    "word": word,
                    "start": start,
                    "end": end,
                }
            )
        idx += 1
    for i in range(len(results)):
        print(results[i])'''

'''
from torch.utils.data import DataLoader
from transformers import DistilBertForSequenceClassification, AdamW

device = torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')
print(device)

#model = DistilBertForSequenceClassification.from_pretrained('distilbert-base-uncased')
model.to(device)


train_loader = DataLoader(train_dataset, batch_size=16, shuffle=True)
val_loader = DataLoader(val_dataset, batch_size=16, shuffle=True)

optim = AdamW(model.parameters(), lr=5e-5)

# ËÆæÁΩÆËÆ≠ÁªÉÁΩëÁªúÁöÑ‰∏Ä‰∫õÂèÇÊï∞
# ËÆ∞ÂΩïËÆ≠ÁªÉÁöÑÊ¨°Êï∞
total_train_step = 0
# ËÆ∞ÂΩïÊµãËØïÁöÑÊ¨°Êï∞
total_test_step = 0

from torch.utils.tensorboard import SummaryWriter
# Ê∑ªÂä†tensorboard
writer = SummaryWriter("/home/ljiang/NER_MTL/logs_train")

for epoch in range(3):
    print("-------Á¨¨ {} ËΩÆËÆ≠ÁªÉÂºÄÂßã-------".format(epoch+1))
    model.train()
    for batch in train_loader:
        optim.zero_grad()
        input_ids = batch['input_ids'].to(device)
        attention_mask = batch['attention_mask'].to(device)
        labels = batch['labels'].to(device)
        outputs = model(input_ids, attention_mask=attention_mask, labels=labels)
        loss = outputs[0]
        loss.backward()
        optim.step()

        total_train_step = total_train_step + 1
        if total_train_step % 100 == 0:
            print("ËÆ≠ÁªÉÊ¨°Êï∞Ôºö{}, Loss: {}".format(total_train_step, loss.item()))
            writer.add_scalar("train_loss", loss.item(), total_train_step)

    torch.save(model, "model_{}.pth".format(epoch))
    print("Ê®°ÂûãÂ∑≤‰øùÂ≠ò")

    # ÊµãËØïÊ≠•È™§ÂºÄÂßã
    print("evaluation")
    model.eval()
    total_test_loss = 0
    total_accuracy = 0
    with torch.no_grad():
        for batch in val_loader:
            input_ids = batch['input_ids'].to(device)
            attention_mask = batch['attention_mask'].to(device)
            labels = batch['labels'].to(device)
            outputs = model(input_ids, attention_mask=attention_mask, labels=labels)
            loss = outputs[0]

            total_test_loss = total_test_loss + loss.item()
                            
            accuracy = (outputs.argmax(1) == labels).sum()
            total_accuracy = total_accuracy + accuracy
                
        print("Êï¥‰ΩìÊµãËØïÈõÜ‰∏äÁöÑLoss: {}".format(total_test_loss))
        print("Êï¥‰ΩìÊµãËØïÈõÜ‰∏äÁöÑÊ≠£Á°ÆÁéá: {}".format(total_accuracy/val_data_size))
        writer.add_scalar("test_loss", total_test_loss, total_test_step)
        writer.add_scalar("test_accuracy", total_accuracy/val_data_size, total_test_step)
        total_test_step = total_test_step + 1

        torch.save(model, "model_{}.pth".format(epoch))
        print("Ê®°ÂûãÂ∑≤‰øùÂ≠ò")
writer.close() '''
